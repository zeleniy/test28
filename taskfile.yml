# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, World!
  MIGRATIONS_PATH: db/migrations

dotenv: ['.env']

tasks:
  default:
    silent: true
    cmds:
      - |
        echo "ðŸš€ Go Test Assignment: Subscription Service API"
        echo "   REST service for managing user subscriptions"
        echo ""
        echo "ðŸ“– Available commands: task --list"
        echo "   Documentation: README.md"

  env:
    desc: "Print .env file variables"
    silent: true
    cmds:
      - echo DB_PORT={{.DB_PORT}}
      - echo DB_HOST={{.DB_HOST}}
      - echo DB_USER={{.DB_USER}}
      - echo DB_PASS={{.DB_PASS}}
      - echo DB_NAME={{.DB_NAME}}

  docker:up:
    desc: "Run docker compose fleet"
    aliases: [up, serve]
    cmds:
      - docker compose up {{.CLI_ARGS}}

  app:sh:
    desc: "Run application server shell"
    aliases: [sh]
    cmds:
      - docker compose exec -it app sh

  app:test:
    desc: "Run application test"
    aliases: [test]
    cmds:
      - go test ./models/ ./tests/... {{.CLI_ARGS}}

  app:testsum:
    desc: "Run application test"
    aliases: [testsum]
    cmds:
      - gotestsum ./models/ ./tests/... {{.CLI_ARGS}}

  pg:sh:
    desc: "Run PostreSQL shell"
    aliases: [pg]
    cmds:
      - docker compose exec -it postgres psql -U postgres

  boiler:config:
    desc: "Generate SQLBoiler config file"
    silent: true
    cmds:
      - |
        cat > sqlboiler.toml << EOF
        output   = "models"
        wipe     = true
        no-tests = false
        add-enum-types = true

        [psql]
          dbname = "{{.DB_NAME}}"
          host   = "{{.DB_HOST}}"
          port   = {{.DB_PORT}}
          user   = "{{.DB_USER}}"
          pass   = "{{.DB_PASS}}"
          sslmode = "disable"
          blacklist = ["schema_migrations"]
        EOF

  boiler:models:
    desc: "Generate SQLBoiler models"
    deps: [boiler:config]
    cmds:
      - sqlboiler psql

  boiler:factories:
    desc: "Generate SQLBoiler factories"
    deps: [boiler:config]
    cmds:
      - boilingfactory psql --sqlboiler-models github.com/zeleniy/test28/models --output factory --wipe

  boiler:seeders:
    desc: "Generate SQLBoiler factories"
    deps: [boiler:config]
    cmds:
      - boilingseed psql --sqlboiler-models github.com/zeleniy/test28/models --output database/seeds --wipe

  boiler:code:
    desc: "Generate ORM entities"
    deps: [boiler:models, boiler:factories, boiler:seeders]

  db:seed:
    desc: "Seed database with some data"
    deps: [boiler:code]
    aliases: [seed]
    cmds:
      - go run cmd/seed/main.go

  migrate:up:
    desc: "Apply migrations"
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} up {{.CLI_ARGS}}

  migrate:down:
    desc: "Rollback migrations" 
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} down {{.CLI_ARGS}}

  migrate:version:
    desc: "Show current migration version"
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} version {{.CLI_ARGS}}

  migrate:test:up:
    desc: "Apply migrations"
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_TEST_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} up {{.CLI_ARGS}}

  migrate:test:down:
    desc: "Rollback migrations" 
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_TEST_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} down {{.CLI_ARGS}}

  migrate:test:version:
    desc: "Show current migration version"
    cmds:
      - migrate -database 'postgres://{{.DB_USER}}:{{.DB_PASS}}@{{.DB_HOST}}:{{.DB_PORT}}/{{.DB_TEST_NAME}}?sslmode=disable' -path {{.MIGRATIONS_PATH}} version {{.CLI_ARGS}}
