# https://taskfile.dev

version: '3'

vars:
  MIGRATIONS_PATH: database/migrations

dotenv: ['.env']

tasks:
  default:
    silent: true
    cmds:
      - |
        echo "ðŸš€ Go Test Assignment: Subscription Service API"
        echo "   REST service for managing user subscriptions"
        echo ""
        echo "ðŸ“– Available commands: task --list"
        echo "   Documentation: README.md"

  env:
    desc: "Print .env file variables"
    silent: true
    cmds:
      - echo DB_PORT={{.DB_PORT}}
      - echo DB_HOST={{.DB_HOST}}
      - echo DB_USER={{.DB_USER}}
      - echo DB_PASS={{.DB_PASS}}
      - echo DB_NAME={{.DB_NAME}}
      - echo DB_URL={{.DB_URL}}
      - echo DB_TEST_URL={{.DB_TEST_URL}}
      - echo APP_BASE_CMD={{.APP_BASE_CMD}}
      - echo PG_BASE_CMD={{.PG_BASE_CMD}}

  docker:up:
    desc: "Run docker compose fleet"
    aliases: [up, start, serve]
    cmds:
      - docker compose up {{.CLI_ARGS}}

  docker:down:
    desc: "Stop docker compose fleet"
    aliases: [down, stop]
    cmds:
      - docker compose down {{.CLI_ARGS}}

  go:fmt:
    desc: "Run gofmt"
    aliases: [fmt]
    cmds:
      - |
        {{.APP_BASE_CMD}} gofmt -d .

  go:vet:
    desc: "Run go vet"
    aliases: [vet]
    cmds:
      - |
        {{.APP_BASE_CMD}} go vet -all ./...

  go:staticcheck:
    desc: "Run staticcheck"
    aliases: [staticcheck]
    cmds:
      - |
        {{.APP_BASE_CMD}} staticcheck $({{.APP_BASE_CMD}} go list ./... | grep -v 'database/factories' | grep -v 'database/seeders')

  go:compile:
    desc: "Compile application"
    aliases: [compile]
    cmds:
      - |
        {{.APP_BASE_CMD}} go build -o target/server cmd/server/main.go

  go:test:
    desc: "Run application test"
    deps: [migrate:test:fresh]
    aliases: [test]
    cmds:
      - |
        {{.APP_BASE_CMD}} go test ./internal/models/ ./tests/... {{.CLI_ARGS}}

  go:testsum:
    desc: "Run application test"
    deps: [migrate:test:fresh]
    aliases: [testsum]
    cmds:
      - |
        {{.APP_BASE_CMD}} gotestsum ./internal/models/ ./tests/... {{.CLI_ARGS}}

  app:sh:
    desc: "Run application server shell"
    aliases: [sh]
    cmds:
      - |
        {{.APP_BASE_CMD}} sh

  app:build:
    desc: "Build application"
    aliases: [build]
    cmds:
      - task: go:fmt
      - task: go:vet
      - task: go:staticcheck
      - task: go:test

  pg:sh:
    desc: "Run PostreSQL shell"
    aliases: [pg]
    cmds:
      - docker compose exec postgres psql -U postgres

  boiler:config:
    desc: "Generate SQLBoiler config file"
    silent: true
    cmds:
      - |
        {{.APP_BASE_CMD}} cat > sqlboiler.toml << EOF
        output   = "models"
        no-tests = false
        add-enum-types = true

        [psql]
          dbname = "{{.DB_NAME}}"
          host   = "{{.DB_HOST}}"
          port   = {{.DB_PORT}}
          user   = "{{.DB_USER}}"
          pass   = "{{.DB_PASS}}"
          sslmode = "disable"
          blacklist = ["schema_migrations"]
        EOF

  boiler:models:
    desc: "Generate SQLBoiler models"
    deps: [boiler:config]
    cmds:
      - |
        {{.APP_BASE_CMD}} sqlboiler psql --output internal/models

  boiler:factories:
    desc: "Generate SQLBoiler factories"
    deps: [boiler:config]
    cmds:
      - |
        {{.APP_BASE_CMD}} boilingfactory psql --sqlboiler-models github.com/zeleniy/test28/internal/models --output database/factories --wipe

  boiler:seeders:
    desc: "Generate SQLBoiler factories"
    deps: [boiler:config]
    cmds:
      - |
        {{.APP_BASE_CMD}} boilingseed psql --sqlboiler-models github.com/zeleniy/test28/internal/models --pkgname seeders --output database/seeders --wipe

  boiler:code:
    desc: "Generate ORM entities"
    deps: [boiler:models, boiler:factories, boiler:seeders]

  db:seed:
    desc: "Seed database with some data"
    deps: [boiler:code]
    aliases: [seed]
    cmds:
      - |
        {{.APP_BASE_CMD}} go run cmd/seed/main.go

  db:test:wipe:
    desc: "Drop all tables"
    cmds:
      - |
        {{.APP_BASE_CMD}} psql {{.DB_TEST_URL}} -c "
          DO \$\$ 
          DECLARE 
              r RECORD;
          BEGIN
              FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
              LOOP
                  EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
              END LOOP;
          END \$\$;"

  migrate:up:
    desc: "Apply migrations"
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_URL}}' -path {{.MIGRATIONS_PATH}} up {{.CLI_ARGS}}

  migrate:down:
    desc: "Rollback migrations" 
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_URL}}' -path {{.MIGRATIONS_PATH}} down {{.CLI_ARGS}}

  migrate:version:
    desc: "Show current migration version"
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_URL}}' -path {{.MIGRATIONS_PATH}} version {{.CLI_ARGS}}

  migrate:test:up:
    desc: "Apply migrations"
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_TEST_URL}}' -path {{.MIGRATIONS_PATH}} up {{.CLI_ARGS}}

  migrate:test:down:
    desc: "Rollback migrations" 
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_TEST_URL}}' -path {{.MIGRATIONS_PATH}} down {{.CLI_ARGS}}

  migrate:test:version:
    desc: "Show current migration version"
    cmds:
      - |
        {{.APP_BASE_CMD}} migrate -database '{{.DB_TEST_URL}}' -path {{.MIGRATIONS_PATH}} version {{.CLI_ARGS}}

  migrate:test:fresh:
    desc: "Drop all tables and re-run all migrations"
    cmds:
      - task: db:test:wipe
      - task: migrate:test:up

  migrate:test:refresh:
    desc: "Reset and re-run all migrations"
    cmds:
      - task: migrate:test:down
      - task: migrate:test:up
