// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeds

import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	models "github.com/zeleniy/test28/models"
)

type Seeder struct {
	// The minimum number of Subscriptions to seed
	MinSubscriptionsToSeed int
	// RandomSubscription creates a random models.Subscription
	// It does not need to add relationships.
	// If one is not set, defaultRandomSubscription() is used
	RandomSubscription func() (*models.Subscription, error)
	// AfterSubscriptionsAdded runs after all Subscriptions are added
	AfterSubscriptionsAdded func(ctx context.Context) error
	// defaultSubscriptionForeignKeySetter() is used if this is not set
	// setting this means that the xxxPerxxx settings cannot be guaranteed
	SubscriptionForeignKeySetter func(i int, o *models.Subscription, allUsers models.UserSlice) error

	// The minimum number of Users to seed
	MinUsersToSeed int
	// RandomUser creates a random models.User
	// It does not need to add relationships.
	// If one is not set, defaultRandomUser() is used
	RandomUser func() (*models.User, error)
	// AfterUsersAdded runs after all Users are added
	AfterUsersAdded func(ctx context.Context) error

	SubscriptionsPerUser int

	// Number of times to retry getting a unique relationship in many-to-many relationships
	Retries int
}

func (s Seeder) Run(ctx context.Context, exec boil.ContextExecutor) error {
	rand.Seed(time.Now().Unix())
	var wg sync.WaitGroup

	ctxMain, cancelMain := context.WithCancel(ctx)
	defer cancelMain()

	ctxSubscriptions, cancelSubscriptions := context.WithCancel(ctxMain)
	ctxUsers, cancelUsers := context.WithCancel(ctxMain)

	errChan := make(chan error, 2)

	// RunSubscriptionsSeed()
	wg.Add(1)
	go func() {
		defer cancelSubscriptions()
		defer wg.Done()
		<-ctxUsers.Done()

		if err := s.seedSubscriptions(ctxSubscriptions, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	// RunUsersSeed()
	wg.Add(1)
	go func() {
		defer cancelUsers()
		defer wg.Done()

		if err := s.seedUsers(ctxUsers, exec); err != nil {
			errChan <- err
			cancelMain()
		}
	}()

	wg.Wait()

	close(errChan)
	err := <-errChan
	if err != nil {
		return err
	}

	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ fmt.Scanner
var _ = models.NewQuery()
