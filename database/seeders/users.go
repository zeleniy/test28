// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeders

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	models "github.com/zeleniy/test28/models"
)

var (
	userColumnsWithDefault = []string{"id", "created_at"}
	userDBTypes            = map[string]string{`ID`: `integer`, `Login`: `character varying`, `PasswordHash`: `character`, `CreatedAt`: `timestamp with time zone`}
)

// defaultRandomUser creates a random model.User
// Used when RandomUser is not set in the Seeder
func defaultRandomUser() (*models.User, error) {
	o := &models.User{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedUsers(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding Users")
	UsersToAdd := s.MinUsersToSeed

	randomFunc := s.RandomUser
	if randomFunc == nil {
		randomFunc = defaultRandomUser
	}

	for i := 0; i < UsersToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random User: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert User: %w", err)
		}
	}

	// run afterAdd
	if s.AfterUsersAdded != nil {
		if err := s.AfterUsersAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterUsersAdded: %w", err)
		}
	}

	fmt.Println("Finished adding Users")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// user is here to prevent erros due to driver "BasedOnType" imports.
type user struct {
	ID           int
	Login        string
	PasswordHash string
	CreatedAt    time.Time
}
