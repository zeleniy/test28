// Code generated by SQLBoiler boilingseed-0.1.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package seeders

import (
	"context"
	"fmt"
	"math"
	"strconv"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	models "github.com/zeleniy/test28/models"
)

var (
	subscriptionColumnsWithDefault = []string{"id", "end_date", "created_at"}
	subscriptionDBTypes            = map[string]string{`ID`: `integer`, `UserID`: `integer`, `ServiceName`: `character varying`, `Price`: `integer`, `StartDate`: `timestamp with time zone`, `EndDate`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`}
)

func defaultSubscriptionForeignKeySetter(i int, o *models.Subscription, allUsers models.UserSlice) error {
	if len(allUsers) > 0 {
		// set user
		UserKey := int(math.Mod(float64(i), float64(len(allUsers))))
		user := allUsers[UserKey]

		o.UserID = user.ID

	}
	return nil
}

// defaultRandomSubscription creates a random model.Subscription
// Used when RandomSubscription is not set in the Seeder
func defaultRandomSubscription() (*models.Subscription, error) {
	o := &models.Subscription{}
	seed := randomize.NewSeed()
	err := randomize.Struct(seed, o, subscriptionDBTypes, true, subscriptionColumnsWithDefault...)

	return o, err
}

func (s Seeder) seedSubscriptions(ctx context.Context, exec boil.ContextExecutor) error {
	fmt.Println("Adding Subscriptions")
	SubscriptionsToAdd := s.MinSubscriptionsToSeed

	randomFunc := s.RandomSubscription
	if randomFunc == nil {
		randomFunc = defaultRandomSubscription
	}

	fkFunc := s.SubscriptionForeignKeySetter
	if fkFunc == nil {
		fkFunc = defaultSubscriptionForeignKeySetter
	}

	users, err := models.Users().All(ctx, exec)
	if err != nil {
		return fmt.Errorf("error getting users: %w", err)
	}

	if s.SubscriptionsPerUser*len(users) > SubscriptionsToAdd {
		SubscriptionsToAdd = s.SubscriptionsPerUser * len(users)
	}

	for i := 0; i < SubscriptionsToAdd; i++ {
		// create model
		o, err := randomFunc()
		if err != nil {
			return fmt.Errorf("unable to get Random Subscription: %w", err)
		}

		// Set foreign keys
		err = fkFunc(i, o, users)
		if err != nil {
			return fmt.Errorf("unable to get set foreign keys for Subscription: %w", err)
		}

		// insert model
		if err := o.Insert(ctx, exec, boil.Infer()); err != nil {
			return fmt.Errorf("unable to insert Subscription: %w", err)
		}
	}

	// run afterAdd
	if s.AfterSubscriptionsAdded != nil {
		if err := s.AfterSubscriptionsAdded(ctx); err != nil {
			return fmt.Errorf("error running AfterSubscriptionsAdded: %w", err)
		}
	}

	fmt.Println("Finished adding Subscriptions")
	return nil
}

// These packages are needed in SOME models
// This is to prevent errors in those that do not need it
var _ = math.E
var _ = queries.Query{}

// This is to force strconv to be used. Without it, it causes an error because strconv is imported by ALL the drivers
var _ = strconv.IntSize

// subscription is here to prevent erros due to driver "BasedOnType" imports.
type subscription struct {
	ID          int
	UserID      int
	ServiceName string
	Price       int
	StartDate   time.Time
	EndDate     null.Time
	CreatedAt   time.Time
}
