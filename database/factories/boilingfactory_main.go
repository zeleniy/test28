// Code generated by SQLBoiler boilingfactory-0.1.0 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"fmt"
	"reflect"
)

type Factory struct {
	baseSubscriptionMod SubscriptionMod
	baseUserMod         UserMod
}

var defaultFactory = new(Factory)

func SetBaseSubscriptionMod(mod SubscriptionMod) {
	defaultFactory.SetBaseSubscriptionMod(mod)
}

func (f *Factory) SetBaseSubscriptionMod(mod SubscriptionMod) {
	f.baseSubscriptionMod = mod
}

func SetBaseUserMod(mod UserMod) {
	defaultFactory.SetBaseUserMod(mod)
}

func (f *Factory) SetBaseUserMod(mod UserMod) {
	f.baseUserMod = mod
}

func isZero(value interface{}) bool {
	val := reflect.Indirect(reflect.ValueOf(value))
	typ := val.Type()

	zero := reflect.Zero(typ)
	return reflect.DeepEqual(zero.Interface(), val.Interface())
}

type contextKey string

func inContextKey(ctx context.Context, key contextKey, val string) bool {
	vals, _ := ctx.Value(key).(map[string]struct{})
	if vals == nil {
		return false
	}

	_, ok := vals[val]
	return ok
}

func addToContextKey(ctx context.Context, key contextKey, val string) context.Context {
	vals, _ := ctx.Value(key).(map[string]struct{})
	if vals == nil {
		vals = map[string]struct{}{
			val: {},
		}
	} else {
		vals[val] = struct{}{}
	}

	return context.WithValue(ctx, key, vals)
}

func stringifyVal(val ...interface{}) string {
	strVal := ""

	for _, v := range val {
		strVal += fmt.Sprintf("%v", v)
	}

	return strVal
}
